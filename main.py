import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ChatMemberAdministrator, \
    InputFile, Chat, FSInputFile
from aiogram.enums import ChatMemberStatus
from aiogram.filters import CommandStart, Command, Filter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.methods import SendPhoto


from config import TELEGRAM_TOKEN

# –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ... –≠—Ç–æ —Å–æ—Å—Ç–∞—è–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
states = {}
# –ú–æ–∂–µ—Ç dict_for_messages –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å states - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É –Ω–∏—Ö –æ–±—â–∞—è –∑–∞–¥–∞—á–∞ - —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
dict_for_messages = {}
dp = Dispatcher()
bot = Bot(TELEGRAM_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä (–¥–ª—è —Ñ–∏—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤)
def clbk_filter(data: str):
    def check(x: CallbackQuery):
        return x.data == data
    return check

# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –°—Ç–∞—Ä—Ç–µ
@dp.message(CommandStart())
async def start_command(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.add(InlineKeyboardButton(text='‚úçÔ∏è –ö–∞–Ω–∞–ª—ã', callback_data='channels'))
    text = 'üíª –ü—Ä–∏–≤–µ—Ç'
    # –£—Å–ª–æ–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ (—Ç.–∫. –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ —Ç—É—Ç –∏ —á–µ—Ä–µ–∑ callback_main)
    if message.from_user.id == bot.id:
        await message.edit_text(text, reply_markup=keyboard.as_markup())
    else:
        await message.answer(text, reply_markup=keyboard.as_markup())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ callback query –µ—Å–ª–∏ –≤ –Ω—ë–º query.data == 'channels')
@dp.callback_query(clbk_filter('channels'))
async def start_channels_callback(query: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    # keyboard = keyboard.row(InlineKeyboardButton(text='–ö–∞–Ω–∞–ª', callback_data='channels'))
    keyboard = keyboard.row(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel'), InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='main'))
    await query.message.edit_text(text='üíª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª', reply_markup=keyboard.as_markup())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ callback query –µ—Å–ª–∏ –≤ –Ω—ë–º query.data == 'add_channel')
@dp.callback_query(clbk_filter('add_channel'))
async def add_channel(query: CallbackQuery):
    states[query.from_user.id] = {
        'state': 'adding_channel'
    }
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='channels'))
    await query.message.edit_text(text='‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n1) –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª\n2) –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—É–¥–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞', reply_markup=keyboard.as_markup())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ callback query –µ—Å–ª–∏ –≤ –Ω—ë–º query.data == 'main')
@dp.callback_query(clbk_filter('main'))
async def callback_main(query: CallbackQuery): 
    await start_command(query.message)

# –≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–¥–º–µ–Ω—é... (—Å–º –Ω–∞ —Ñ-–∏—é adding_channel_forward)
def adding_channel_filter():
    def check(x: Message):
        return x.chat.id == x.from_user.id and x.forward_from_chat is not None and x.from_user.id in states and states[x.from_user.id]['state'] == 'adding_channel'
    return check

# –§-–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫—Ç–æ –ø–∏—à–µ—Ç –±–æ—Ç—É) –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç—å –≤ –∫–∞–Ω–∞–ª
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 - —á—Ç–æ –≤–æ–æ–±—â–µ –±–æ—Ç –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 - –æ–Ω –≤ –∫–∞–Ω–∞–ª–µ, –Ω–æ —Å–∞–º —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∞–¥–º–∏–Ω
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2 - –æ–Ω –≤ –∫–∞–Ω–∞–ª–µ, –∏ –æ–Ω –∞–¥–º–∏–Ω
async def is_user_admin(user_id: int, chat: Chat) -> int:
    admins: list[ChatMemberAdministrator] = []
    try:
        admins = await chat.get_administrators()
    except TelegramForbiddenError as err:
        return 0
    except TelegramBadRequest as err:
        return 0
    client = set(filter(lambda x: x.user.id == user_id and (x.status == ChatMemberStatus.CREATOR or x.can_post_messages), admins))
    if len(client) == 0:
        return 1
    return 2
    
# –ü–æ –º–æ–µ–π –∏–¥–µ–∏, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∫ –±–æ—Ç—É –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—Å—è —Ç–≥ –∫–∞–Ω–∞–ª—ã, –∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω—é
@dp.message(adding_channel_filter())
async def adding_channel_forward(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='channels'))
    status = await is_user_admin(message.from_user.id, message.forward_from_chat)
    if status == 0:
        await message.answer(text='–Ø –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ üòí', reply_markup=keyboard.as_markup())
    elif status == 1:
        await message.answer(text='–¢—ã –Ω–µ –∞–¥–º–∏–Ω üòí', reply_markup=keyboard.as_markup())
    else:
        pass
        # await message.answer(text='TODO —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é –Ω–∏–±—É–¥—å —Å–≤—è–∑—å, —Ç–∏–ø–æ –±–¥', reply_markup=keyboard.as_markup())

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
@dp.message(Command('preview'))
async def show_current_post(message: types.Message):
    if dict_for_messages['photo']:
        await bot.send_photo(chat_id=message.chat.id, photo=dict_for_messages['photo'], caption=dict_for_messages['text'])
    else:
        await message.answer(text=dict_for_messages['text'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /publish
@dp.message(Command('publish'))
async def publish_command(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    await message.reply("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text(message: types.Message):
    dict_for_messages['text'] = message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await message.reply("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@dp.message(F.photo)
async def handle_media(message: types.Message):
    dict_for_messages['photo'] = message.photo[2].file_id
    print(dict_for_messages['photo'])
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await message.reply("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
async def publish_post(text, media):
    # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª

    pass

# # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É
# def add_button(text):
#     keyboard = InlineKeyboardMarkup()
#     button = InlineKeyboardButton(text="–ù–∞–∂–º–∏", callback_data="button_pressed")
#     keyboard.add(button)
#     return keyboard
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
# @dp.callback_query_handler(lambda c: c.data == "button_pressed")
# async def process_callback_button1(callback_query: types.CallbackQuery):
#     await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id, "–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
    
