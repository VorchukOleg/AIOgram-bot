import asyncio
import logging
import sys
from aiogram import F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F

from globals import *
from state import states, StateFilter, delete_state
from database import link_chat_to_user, get_links_of_user, is_linked, unlink_chat_from_user, add_schedule
from utils import CallbackFilter, is_user_admin, get_user_id, answer, Context, parse_date
from classes import Post, State
import scheduler

# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –°—Ç–∞—Ä—Ç–µ
@dp.message(CommandStart())
async def start_command(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.add(InlineKeyboardButton(text='üìö –ö–∞–Ω–∞–ª—ã', callback_data='channels'))
    text = 'üíª –ü—Ä–∏–≤–µ—Ç'
    delete_state(message)
    await answer(message, text=text, reply_markup=keyboard.as_markup())

async def channels_menu(c: Context):
    keyboard = InlineKeyboardBuilder()
    delete_state(c)
    for linkedChat in await get_links_of_user(get_user_id(c)):
        keyboard = keyboard.row(InlineKeyboardButton(text=linkedChat.full_name, callback_data='channel_' + str(linkedChat.id)))
    keyboard = keyboard.row(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel'), InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='main'))
    await answer(c, text='üíª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª', reply_markup=keyboard.as_markup())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ callback query –µ—Å–ª–∏ –≤ –Ω—ë–º query.data == 'channels')
@dp.callback_query(CallbackFilter('channels'))
async def channels_callback(query: CallbackQuery):
    await channels_menu(query)

async def channel_menu(c: Context, chat_id: int | None = None):
    user_id = get_user_id(c)
    states[user_id] = State(
        'channel',
        chat_id=chat_id or states[user_id].chat_id
    )
    chat = await bot.get_chat(states[user_id].chat_id)
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', callback_data='write_post'))
    keyboard = keyboard.row(InlineKeyboardButton(text='‚ùå –û—Ç–≤—è–∑–∞—Ç—å', callback_data='unlink_channel'))
    keyboard = keyboard.row(InlineKeyboardButton(text='üìö –ö–∞–Ω–∞–ª—ã', callback_data='channels'))
    await answer(c, text='üíª –ö–∞–Ω–∞–ª: ' + chat.full_name + '\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard.as_markup())


# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º
@dp.callback_query(lambda x: x.data.startswith('channel_'))
async def channel_open_callback(query: CallbackQuery):
    chat = await is_linked(query.from_user.id, int(query.data[len('channel_'):]))
    keyboard = InlineKeyboardBuilder()
    if chat is None:
        keyboard = keyboard.row(InlineKeyboardButton(text='‚úçÔ∏è –ö–∞–Ω–∞–ª—ã', callback_data='channels'))
        await query.message.edit_text(text='‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=keyboard.as_markup())
        return
    await channel_menu(query, chat.id)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ callback query –µ—Å–ª–∏ –≤ –Ω—ë–º query.data == 'add_channel')
@dp.callback_query(CallbackFilter('add_channel'))
async def add_channel(query: CallbackQuery):
    states[get_user_id(query)] = State('adding_channel')
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='channels'))
    await query.message.edit_text(text='‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n1) –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª\n2) –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—É–¥–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞', reply_markup=keyboard.as_markup())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ callback query –µ—Å–ª–∏ –≤ –Ω—ë–º query.data == 'main')
@dp.callback_query(CallbackFilter('main'))
async def callback_main(query: CallbackQuery): 
    await start_command(query.message)
    
# –ü–æ –º–æ–µ–π –∏–¥–µ–∏, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∫ –±–æ—Ç—É –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—Å—è —Ç–≥ –∫–∞–Ω–∞–ª—ã, –∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–¥–º–µ–Ω—é
@dp.message(StateFilter('adding_channel'))
async def adding_channel_forward(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='channels'))
    status = await is_user_admin(get_user_id(message), message.forward_from_chat)
    if status == 0:
        await message.answer(text='–Ø –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ üòí', reply_markup=keyboard.as_markup())
    elif status == 1:
        await message.answer(text='–¢—ã –Ω–µ –∞–¥–º–∏–Ω üòí', reply_markup=keyboard.as_markup())
    else:
        link_chat_to_user(get_user_id(message), message.forward_from_chat.id)
        await message.answer(text='üòä –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã', reply_markup=keyboard.as_markup())

# –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def create_write_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data='publish_post'))
    keyboard = keyboard.row(InlineKeyboardButton(text='üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data='preview_post'))
    keyboard = keyboard.row(InlineKeyboardButton(text='ü©π –û—á–∏—Å—Ç–∏—Ç—å', callback_data='rewrite_post'))
    keyboard = keyboard.row(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_post'))
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–∏–µ –ø–æ—Å—Ç–∞
@dp.callback_query(CallbackFilter('write_post'), StateFilter('channel'))
async def write_post_callback(query: CallbackQuery): 
    states[get_user_id(query)] = State(
        'writing_post',
        chat_id=states[get_user_id(query)].chat_id,
        post=Post()
    )
    await answer(query, text='üëç –†–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç\n\n', reply_markup=create_write_keyboard().as_markup())

@dp.callback_query(CallbackFilter('unlink_channel'), StateFilter('channel'))
async def unlink_channel_callback(query: CallbackQuery):
    unlink_chat_from_user(get_user_id(query), states[get_user_id(query)].chat_id)
    await channels_menu(query)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
@dp.callback_query(StateFilter('writing_post'), CallbackFilter('preview_post'))
async def show_current_post(query: CallbackQuery):
    if states[get_user_id(query)].post.is_empty():
        await answer(query, "–ü–æ—Å—Ç –ø—É—Å—Ç–æ–π.", reply_markup=create_write_keyboard().as_markup())
        return
    else:
        await query.answer()
    await states[get_user_id(query)].post.send(get_user_id(query))
    await bot.send_message(chat_id=get_user_id(query), text='üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', reply_markup=create_write_keyboard().as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /publish
@dp.callback_query(StateFilter('writing_post'), CallbackFilter('publish_post'))
async def publish_command(query: CallbackQuery):
    if states[get_user_id(query)].post.is_empty():
        await answer(query, "–ü–æ—Å—Ç –ø—É—Å—Ç–æ–π.", reply_markup=create_write_keyboard().as_markup())
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    await answer(query, "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    # –í—Ä–µ–º–µ–Ω–∞–Ω—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
    await states[get_user_id(query)].post.send(states[get_user_id(query)].chat_id)
    await channel_menu(query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@dp.callback_query(StateFilter('writing_post'), CallbackFilter('cancel_post'))
async def publish_command(query: CallbackQuery):
    await channel_menu(query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /button
@dp.message(Command('button'), StateFilter('writing_post'))
async def publish_command(message: Message):
    args = message.text.split()
    if len(args) < 3:
        await answer(message, "‚ùì–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É\n\n–ü—Ä–∏–º–µ—Ä:\n/button https://bmstu.ru –°–∞–π—Ç –ú–ì–¢–£ –∏–º –ù. –≠. –ë–∞—É–º–∞–Ω–∞")
        return
    states[get_user_id(message)].post.buttons.append([(' '.join(args[2:]), args[1])])
    await answer(message, "‚ûï –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message(Command('schedule'), StateFilter('writing_post'))
async def publish_command(message: Message):
    if states[get_user_id(message)].post.is_empty():
        await message.reply("–ü–æ—Å—Ç –ø—É—Å—Ç–æ–π.")
        return
    args = message.text.split()
    if len(args) < 2 or parse_date(' '.join(args[1:])) is None:
        await answer(message, "‚ùì–ö–∞–∫ –æ—Ç–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç\n\n–ü—Ä–∏–º–µ—Ä:\n/schedule 31.12.2024 23:59")
        return
    add_schedule(states[get_user_id(message)].chat_id, parse_date(' '.join(args[1:])), states[get_user_id(message)].post)
    await answer(message, "‚åö –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    await channel_menu(message)

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç
@dp.callback_query(StateFilter('writing_post'), CallbackFilter('rewrite_post'))
async def rewrite_post_callback(query: CallbackQuery):
    await answer(query, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞.", reply_markup=create_write_keyboard().as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text, StateFilter('writing_post'))
async def handle_text(message: Message):
    states[get_user_id(message)].post.text = message.md_text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await answer(message, text="–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.", reply_markup=create_write_keyboard().as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@dp.message(F.photo, StateFilter('writing_post'))
async def handle_media(message: Post):
    states[get_user_id(message)].post.photo.append(message.photo[-1].file_id)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await answer(message, text="–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=create_write_keyboard().as_markup())

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    scheduler.run()
    asyncio.run(main())
    
