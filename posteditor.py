from aiogram import F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F

from globals import *
from state import states, StateFilter
from database import add_schedule, get_schedule, delete_schedule, update_schedule
from utils import CallbackFilter, get_user_id, answer, parse_date, Context
from classes import Post, CantBeMixed, State
from menus import channel_menu
import constants

# –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def create_write_keyboard(c: Context):
    keyboard = InlineKeyboardBuilder()
    keyboard = keyboard.row(InlineKeyboardButton(text='üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=constants.callbacks.PUBLISH_POST), InlineKeyboardButton(text='üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data=constants.callbacks.PREVIEW_POST))
    keyboard = keyboard.row(InlineKeyboardButton(text='ü©π –û—á–∏—Å—Ç–∏—Ç—å', callback_data=constants.callbacks.CLEAR_POST))
    if states[get_user_id(c)].schedule_id is not None:
        keyboard = keyboard.row(InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=constants.callbacks.DELETE_POST))
    keyboard = keyboard.row(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=constants.callbacks.CANCEL))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–∏–µ –ø–æ—Å—Ç–∞
@dp.callback_query(CallbackFilter(constants.callbacks.WRITE_POST), StateFilter(constants.states.CHANNEL))
async def write_post_callback(query: CallbackQuery): 
    states[get_user_id(query)] = State(
        constants.states.WRITING_POST,
        chat_id=states[get_user_id(query)].chat_id,
        post=Post()
    )
    await answer(query, text='üëç –†–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç\n\n', reply_markup=create_write_keyboard(query).as_markup())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@dp.callback_query(CallbackFilter(constants.callbacks.EDIT_POST), StateFilter(constants.states.LOOKING_SCHEDULE))
async def write_post_callback(query: CallbackQuery):
    schedule_id, post, _ = get_schedule(states[get_user_id(query)].chat_id, states[get_user_id(query)].page)
    states[get_user_id(query)] = State(
        constants.states.WRITING_POST,
        chat_id=states[get_user_id(query)].chat_id,
        post=post,
        schedule_id=schedule_id,
    )
    await answer(query, text='üëÅÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞', reply_markup=create_write_keyboard(query).as_markup())


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
@dp.callback_query(StateFilter(constants.states.WRITING_POST), CallbackFilter(constants.callbacks.PREVIEW_POST))
async def show_current_post(query: CallbackQuery):
    if states[get_user_id(query)].post.is_empty():
        await answer(query, "–ü–æ—Å—Ç –ø—É—Å—Ç–æ–π.", reply_markup=create_write_keyboard(query).as_markup())
        return
    else:
        await query.answer()
    await states[get_user_id(query)].post.send(get_user_id(query))
    await bot.send_message(chat_id=get_user_id(query), text='üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', reply_markup=create_write_keyboard(query).as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /publish
@dp.callback_query(StateFilter(constants.states.WRITING_POST), CallbackFilter(constants.callbacks.PUBLISH_POST))
async def publish_command(query: CallbackQuery):
    if states[get_user_id(query)].post.is_empty():
        await answer(query, "–ü–æ—Å—Ç –ø—É—Å—Ç–æ–π.", reply_markup=create_write_keyboard(query).as_markup())
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    await answer(query, "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

    await states[get_user_id(query)].post.send(states[get_user_id(query)].chat_id)
    if states[get_user_id(query)].schedule_id is not None:
        delete_schedule(states[get_user_id(query)].schedule_id)
    
    await channel_menu(query)
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@dp.callback_query(StateFilter(constants.states.WRITING_POST), CallbackFilter(constants.callbacks.CANCEL))
async def publish_command(query: CallbackQuery):
    await channel_menu(query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /button
@dp.message(Command('button'), StateFilter(constants.states.WRITING_POST))
async def publish_command(message: Message):
    args = message.text.split()
    if len(args) < 3:
        await answer(message, "‚ùì–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É\n\n–ü—Ä–∏–º–µ—Ä:\n/button https://bmstu.ru –°–∞–π—Ç –ú–ì–¢–£ –∏–º –ù. –≠. –ë–∞—É–º–∞–Ω–∞")
        return
    states[get_user_id(message)].post.buttons.append([(' '.join(args[2:]), args[1])])
    text = '‚ûï –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
    if len(states[get_user_id(message)].post.media) > 1:
        text += '\n\nP.S. –ò–Ω–ª–∞–π–Ω –ö–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram üòí'
    await answer(message, text, reply_markup=create_write_keyboard(message).as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message(Command('schedule'), StateFilter(constants.states.WRITING_POST))
async def publish_command(message: Message):
    if states[get_user_id(message)].post.is_empty():
        await message.reply("–ü–æ—Å—Ç –ø—É—Å—Ç–æ–π.")
        return
    args = message.text.split()
    if len(args) < 2 or parse_date(' '.join(args[1:])) is None:
        await answer(message, "‚ùì–ö–∞–∫ –æ—Ç–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç\n\n–ü—Ä–∏–º–µ—Ä:\n/schedule 31.12.2024 23:59")
        return
    if states[get_user_id(message)].schedule_id is None:
        add_schedule(states[get_user_id(message)].chat_id, parse_date(' '.join(args[1:])), states[get_user_id(message)].post)
        await answer(message, "‚åö –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    else:
        update_schedule(states[get_user_id(message)].schedule_id, states[get_user_id(message)].post, parse_date(' '.join(args[1:])))
        await answer(message, "‚åö –ü–æ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    await channel_menu(message)

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç
@dp.callback_query(StateFilter(constants.states.WRITING_POST), CallbackFilter(constants.callbacks.CLEAR_POST))
async def rewrite_post_callback(query: CallbackQuery):
    states[get_user_id(query)].post = Post()
    await answer(query, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞.", reply_markup=create_write_keyboard(query).as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text, StateFilter(constants.states.WRITING_POST))
async def handle_text(message: Message):
    states[get_user_id(message)].post.text = message.html_text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await answer(message, text="–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.", reply_markup=create_write_keyboard(message).as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–∫
@dp.message(F.photo, StateFilter(constants.states.WRITING_POST))
async def handle_media(message: Message):
    try:
        states[get_user_id(message)].post.add_media(('photo', message.photo[-1].file_id))
    except CantBeMixed:
        await answer(message, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –º–µ–¥–∏–∞ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞", reply_markup=create_write_keyboard(message).as_markup())
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await answer(message, text="–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=create_write_keyboard(message).as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message(F.document, StateFilter(constants.states.WRITING_POST))
async def handle_media(message: Message):
    try:
        states[get_user_id(message)].post.add_media(('document', message.document.file_id))
    except CantBeMixed:
        await answer(message, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –º–µ–¥–∏–∞ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞", reply_markup=create_write_keyboard(message).as_markup())
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await answer(message, text="–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=create_write_keyboard(message).as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message(F.video, StateFilter(constants.states.WRITING_POST))
async def handle_media(message: Message):
    try:
        states[get_user_id(message)].post.add_media(('video', message.video.file_id))
    except CantBeMixed:
        await answer(message, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –º–µ–¥–∏–∞ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞", reply_markup=create_write_keyboard(message).as_markup())
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await answer(message, text="–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=create_write_keyboard(message).as_markup())
